/* soapStub.h
   Generated by gSOAP 2.8.3 from addclient.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns1	"urn:Client_1"
#define SOAP_NAMESPACE_OF_ns2	"urn:Client_2"
#define SOAP_NAMESPACE_OF_ns3	"urn:Client_3"
#include "stdsoap2.h"
#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
/* Base64 schema type: */
struct xsd__base64Binary
{
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__soap_string
#define SOAP_TYPE_ns1__soap_string (12)
/* ns1:soap-string */
struct ns1__soap_string
{
	int size;	/* required element of type xsd:int */
	char *str;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns2__soap_string
#define SOAP_TYPE_ns2__soap_string (13)
/* ns2:soap-string */
struct ns2__soap_string
{
	int size;	/* required element of type xsd:int */
	char *str;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns3__soap_string
#define SOAP_TYPE_ns3__soap_string (14)
/* ns3:soap-string */
struct ns3__soap_string
{
	int size;	/* required element of type xsd:int */
	char *str;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__data
#define SOAP_TYPE_ns1__data (15)
/* Primitive ns1:data schema type: */
struct ns1__data
{
	struct xsd__base64Binary __item;
	char *href;	/* optional attribute of type xsd:anyURI */
};
#endif

#ifndef SOAP_TYPE_ns2__data
#define SOAP_TYPE_ns2__data (16)
/* Primitive ns2:data schema type: */
struct ns2__data
{
	struct xsd__base64Binary __item;
	char *href;	/* optional attribute of type xsd:anyURI */
};
#endif

#ifndef SOAP_TYPE_ns3__data
#define SOAP_TYPE_ns3__data (17)
/* Primitive ns3:data schema type: */
struct ns3__data
{
	struct xsd__base64Binary __item;
	char *href;	/* optional attribute of type xsd:anyURI */
};
#endif

#ifndef SOAP_TYPE_ns1__ReceiveTaskListResponse
#define SOAP_TYPE_ns1__ReceiveTaskListResponse (18)
/* ns1:ReceiveTaskListResponse */
struct ns1__ReceiveTaskListResponse
{
	struct ns1__soap_string *rest;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns1__ReceiveTaskList
#define SOAP_TYPE_ns1__ReceiveTaskList (23)
/* ns1:ReceiveTaskList */
struct ns1__ReceiveTaskList
{
	struct ns1__data *data;	/* optional element of type ns1:data */
};
#endif

#ifndef SOAP_TYPE_ns1__TaskSolveResponse
#define SOAP_TYPE_ns1__TaskSolveResponse (24)
/* ns1:TaskSolveResponse */
struct ns1__TaskSolveResponse
{
	struct ns1__soap_string *ret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns1__TaskSolve
#define SOAP_TYPE_ns1__TaskSolve (27)
/* ns1:TaskSolve */
struct ns1__TaskSolve
{
	int taskId;	/* required element of type xsd:int */
	struct ns1__soap_string *task;	/* optional element of type ns1:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns1__isBusyResponse
#define SOAP_TYPE_ns1__isBusyResponse (30)
/* ns1:isBusyResponse */
struct ns1__isBusyResponse
{
	int *flag;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns1__isBusy
#define SOAP_TYPE_ns1__isBusy (31)
/* ns1:isBusy */
struct ns1__isBusy
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns2__ReceiveTaskListResponse
#define SOAP_TYPE_ns2__ReceiveTaskListResponse (32)
/* ns2:ReceiveTaskListResponse */
struct ns2__ReceiveTaskListResponse
{
	struct ns2__soap_string *rest;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns2__ReceiveTaskList
#define SOAP_TYPE_ns2__ReceiveTaskList (37)
/* ns2:ReceiveTaskList */
struct ns2__ReceiveTaskList
{
	struct ns2__data *data;	/* optional element of type ns2:data */
};
#endif

#ifndef SOAP_TYPE_ns2__TaskSolveResponse
#define SOAP_TYPE_ns2__TaskSolveResponse (38)
/* ns2:TaskSolveResponse */
struct ns2__TaskSolveResponse
{
	struct ns2__soap_string *ret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns2__TaskSolve
#define SOAP_TYPE_ns2__TaskSolve (41)
/* ns2:TaskSolve */
struct ns2__TaskSolve
{
	int taskId;	/* required element of type xsd:int */
	struct ns2__soap_string *task;	/* optional element of type ns2:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns2__isBusyResponse
#define SOAP_TYPE_ns2__isBusyResponse (43)
/* ns2:isBusyResponse */
struct ns2__isBusyResponse
{
	int *flag;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns2__isBusy
#define SOAP_TYPE_ns2__isBusy (44)
/* ns2:isBusy */
struct ns2__isBusy
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns3__ReceiveTaskListResponse
#define SOAP_TYPE_ns3__ReceiveTaskListResponse (45)
/* ns3:ReceiveTaskListResponse */
struct ns3__ReceiveTaskListResponse
{
	struct ns3__soap_string *rest;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns3__ReceiveTaskList
#define SOAP_TYPE_ns3__ReceiveTaskList (50)
/* ns3:ReceiveTaskList */
struct ns3__ReceiveTaskList
{
	struct ns3__data *data;	/* optional element of type ns3:data */
};
#endif

#ifndef SOAP_TYPE_ns3__TaskSolveResponse
#define SOAP_TYPE_ns3__TaskSolveResponse (51)
/* ns3:TaskSolveResponse */
struct ns3__TaskSolveResponse
{
	struct ns3__soap_string *ret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns3__TaskSolve
#define SOAP_TYPE_ns3__TaskSolve (54)
/* ns3:TaskSolve */
struct ns3__TaskSolve
{
	int taskId;	/* required element of type xsd:int */
	struct ns3__soap_string *task;	/* optional element of type ns3:soap-string */
};
#endif

#ifndef SOAP_TYPE_ns3__isBusyResponse
#define SOAP_TYPE_ns3__isBusyResponse (56)
/* ns3:isBusyResponse */
struct ns3__isBusyResponse
{
	int *flag;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns3__isBusy
#define SOAP_TYPE_ns3__isBusy (57)
/* ns3:isBusy */
struct ns3__isBusy
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (58)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (59)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (61)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (64)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (65)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (7)
typedef char *xsd__anyURI;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ReceiveTaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__data *data, struct ns1__ReceiveTaskListResponse *_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__TaskSolve(struct soap *soap, const char *soap_endpoint, const char *soap_action, int taskId, struct ns1__soap_string *task, struct ns1__TaskSolveResponse *_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__isBusy(struct soap *soap, const char *soap_endpoint, const char *soap_action, int *flag);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__ReceiveTaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns2__data *data, struct ns2__ReceiveTaskListResponse *_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__TaskSolve(struct soap *soap, const char *soap_endpoint, const char *soap_action, int taskId, struct ns2__soap_string *task, struct ns2__TaskSolveResponse *_param_4);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__isBusy(struct soap *soap, const char *soap_endpoint, const char *soap_action, int *flag);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__ReceiveTaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns3__data *data, struct ns3__ReceiveTaskListResponse *_param_5);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__TaskSolve(struct soap *soap, const char *soap_endpoint, const char *soap_action, int taskId, struct ns3__soap_string *task, struct ns3__TaskSolveResponse *_param_6);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns3__isBusy(struct soap *soap, const char *soap_endpoint, const char *soap_action, int *flag);

#ifdef __cplusplus
}
#endif

#endif

/* End of soapStub.h */
